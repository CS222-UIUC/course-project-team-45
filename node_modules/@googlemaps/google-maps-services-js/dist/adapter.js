"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.customAdapter = exports.statusToCode = void 0;
const settle = require("axios/lib/core/settle");
const defaults = require("axios/lib/defaults");
const transformData = require("axios/lib/core/transformData");
const common_1 = require("./common");
function statusToCode(status) {
    switch (status) {
        case common_1.Status.OK:
        case common_1.Status.ZERO_RESULTS: {
            return 200;
        }
        case common_1.Status.INVALID_REQUEST:
        case common_1.Status.MAX_ROUTE_LENGTH_EXCEEDED:
        case common_1.Status.MAX_WAYPOINTS_EXCEEDED: {
            return 400;
        }
        case common_1.Status.REQUEST_DENIED: {
            return 403;
        }
        case common_1.Status.NOT_FOUND: {
            return 404;
        }
        case common_1.Status.OVER_DAILY_LIMIT:
        case common_1.Status.OVER_QUERY_LIMIT: {
            return 429;
        }
        case common_1.Status.UNKNOWN_ERROR: {
            return 500;
        }
        default: {
            return 200;
        }
    }
}
exports.statusToCode = statusToCode;
const customAdapter = (config) => new Promise((resolve, reject) => {
    defaults
        .adapter(config)
        .then((r) => {
        // unfortunately data is transformed after the adapter
        r.data = transformData(r.data, r.headers, config.transformResponse);
        if (r.status === 200 && r.data.status) {
            r.status = statusToCode(r.data.status);
        }
        settle(resolve, reject, r);
    })
        .catch(reject);
});
exports.customAdapter = customAdapter;
//# sourceMappingURL=adapter.js.map